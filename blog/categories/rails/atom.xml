<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hao's Thoughts]]></title>
  <link href="http://leomayleomay.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://leomayleomay.github.io/"/>
  <updated>2013-06-12T08:54:00+08:00</updated>
  <id>http://leomayleomay.github.io/</id>
  <author>
    <name><![CDATA[Hao Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gotcha: ActiveRecord::Base.transaction stops working within callbacks]]></title>
    <link href="http://leomayleomay.github.io/blog/2013/06/07/gotcha-activerecord-base-dot-transaction-stops-working-within-callbacks/"/>
    <updated>2013-06-07T22:45:00+08:00</updated>
    <id>http://leomayleomay.github.io/blog/2013/06/07/gotcha-activerecord-base-dot-transaction-stops-working-within-callbacks</id>
    <content type="html"><![CDATA[<p>If you are not familiar with <code>ActiveRecord::Base.transaction</code>, i highly recommend you go through the <a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">document</a>.</p>

<p>As you can see,</p>

<blockquote><p>Exceptions will force a ROLLBACK that returns the database to the state before the transaction began.</p></blockquote>

<p>that means the following code should rollback the transaction if any of the <code>deposit!</code> fails</p>

<p>```ruby</p>

<h1>transaction.rb</h1>

<p>class Transaction &lt; ActiveRecord::Base
  after_create :transfer_credits</p>

<p>  attr_accessible :credits</p>

<p>  belongs_to :send_account, :class_name => "Account"
  belongs_to :recv_account, :class_name => "Account"</p>

<p>  private
  def transfer_credits</p>

<pre><code>begin
  ActiveRecord::Base.transaction do
    send_account.deposit!(-credits) 
    recv_account.deposit!(credits)
  end
rescue =&gt; e
  Rails.logger.info e.message
end
</code></pre>

<p>  end
end</p>

<h1>transaction_spec.rb</h1>

<p>context "exception raised" do
  before do</p>

<pre><code>@send_account = create :account, :credits =&gt; 1000

@transaction = Transaction.new
@transaction.send_account = @send_account
@transaction.credits = 1

recv_account = double(:account).as_null_object
@transaction.stub(:recv_account) {recv_account}
recv_account.should_receive(:deposit!).and_raise(StandardError.new("Transfer failed!"))
</code></pre>

<p>  end</p>

<p>  it "should not transfer the credits" do</p>

<pre><code>@transaction.save

@send_account.reload

@send_account.credits.should == 1000
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>But the result is the spec fails and says</p>

<p>```bash</p>

<p>Failures:</p>

<p>  1) Transaction status exception raised should not transfer the credits</p>

<pre><code> Failure/Error: @send_account.credits.should == 1000
   expected: 1000
        got: 999 (using ==)
 # ./spec/models/transaction_spec.rb:185:in `block (4 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 1.73 seconds
1 example, 1 failure</p>

<p>```</p>

<p>It did deduct the credits from the <code>send_account</code> by 1 while i was expecting it should do nothing to it. What's going wrong, the doc says it will rollback the transaction, then I tried to test if calling <code>transfer_credits</code> explicitly is going to work. And yes, it works. Here's the revised version:</p>

<p>```ruby</p>

<h1>transaction.rb</h1>

<p>class Transaction &lt; ActiveRecord::Base
  attr_accessible :credits</p>

<p>  belongs_to :send_account, :class_name => "Account"
  belongs_to :recv_account, :class_name => "Account"</p>

<p>  def transfer_credits</p>

<pre><code>begin
  ActiveRecord::Base.transaction do
    send_account.deposit!(-credits)
    recv_account.deposit!(credits)
  end
rescue =&gt; e
  Rails.logger.info e.message
end
</code></pre>

<p>  end
end</p>

<h1>transaction_spec.rb</h1>

<p>describe "#transfer_credits" do
  before do</p>

<pre><code>@send_account = create :account, :credits =&gt; 1000

@transaction = Transaction.new
@transaction.send_account = @send_account
@transaction.credits = 1

recv_account = double(:account).as_null_object
@transaction.stub(:recv_account) {recv_account}
recv_account.should_receive(:deposit!).and_raise(StandardError.new("Transfer failed!"))
</code></pre>

<p>  end</p>

<p>  it "should not transfer the credits" do</p>

<pre><code>@transaction.transfer_credits

@send_account.reload

@send_account.credits.should == 1000
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>GOTCHA: DO NOT place ATOMIC operations within callbacks, like <code>before_*</code>, <code>after_*</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fancy login with red light]]></title>
    <link href="http://leomayleomay.github.io/blog/2013/05/27/fancy-login-with-red-light/"/>
    <updated>2013-05-27T17:53:00+08:00</updated>
    <id>http://leomayleomay.github.io/blog/2013/05/27/fancy-login-with-red-light</id>
    <content type="html"><![CDATA[<p>I am not saying you are wrong if you are still redirecting the visitor to http://your_killer_app/login to input his/her credentials before letting him/her access the authentication required resource. I am just introducing another way of showing login page to you, the fancy way.</p>

<p>It's fancy because it detects the links and forms requiring authencation in a fancy way. I am going to use <a href="https://github.com/plataformatec/devise">Devise</a> for authentication in the following example app, and you will learn how to have fancy login within your app.</p>

<p>Generate the app</p>

<p><code>bash
$ rails new fancy_login_app
</code></p>

<p>Generate the home controller</p>

<p><code>bash
$ rails g controller home index
</code></p>

<p>Generate the controller requiring authentications</p>

<p><code>bash
$ rails g controller posts new create
</code></p>

<p>Add <a href="https://github.com/plataformatec/devise">Devise</a> and <a href="https://github.com/leomayleomay/red_light">red_light</a> to the Gemfile</p>

<p><code>ruby
gem 'devise'
gem 'red_light'
</code></p>

<p>Install the gems</p>

<p><code>bash
$ bundle install
$ rails g devise:install
$ rails g red_light:install
</code></p>

<p>Configure Devise views</p>

<p><code>bash
$ rails g devise:views
</code></p>

<p>The <code>config/routes.rb</code> should be something like</p>

<p>```ruby
devise_scope :user do
  devise_for :users, :controllers => { :sessions => "sessions" }</p>

<p>  get "/login", :to => "sessions#new"
end</p>

<p>resources :posts, :only => [:new, :create]</p>

<p>root :to => "home#index"
```</p>

<p>Change <code>app/controllers/posts_controller.rb</code> to something like</p>

<p>```ruby
class PostsController &lt; ApplicationController
  before_filter authenticate_user!</p>

<p>  def new
  end</p>

<p>  def create
  end
end
```</p>

<p>Change <code>app/views/home/index.html.erb</code> to something like</p>

<p><code>ruby
&lt;%= link_to "New Post", new_post_path %&gt;
</code></p>

<p>Fire the webrick</p>

<p><code>bash
$ rails s
</code></p>

<p>Visit <code>localhost:3000</code>, inspect the "New Post" link, you fill find the interesting <code>rel</code></p>

<p><img class="left" src="/images/fancy_login_rel.jpg" width="685" height="24" title="'fancy_login_rel'" ></p>

<p><code>red_light</code> add that <code>rel</code> to the link requiring authentication auto-magically. With the <code>rel</code>, you can play some javascript tricks to present a modal view when the link is clicked, here's a <a href="https://fancy-login.herokuapp.com">demo</a>.</p>

<p>You can also customize the <code>config/initializers/red_light.rb</code> to tell the <code>red_light</code> which <code>before_filter</code> should be auto blocked, for now, it's only <code>authenticate_user!</code> there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My thoughts on Sandi Metz's talk on testing magic]]></title>
    <link href="http://leomayleomay.github.io/blog/2013/05/22/my-thoughts-on-sandi-metzs-talk-on-testing-magic/"/>
    <updated>2013-05-22T22:29:00+08:00</updated>
    <id>http://leomayleomay.github.io/blog/2013/05/22/my-thoughts-on-sandi-metzs-talk-on-testing-magic</id>
    <content type="html"><![CDATA[<p>Sandi Metz (<a href="https://twitter.com/sandimetz">@sandimetz</a>) never lets the audiences down, this time, she brought another great talk on testing. I highly recommend you at least walk through the <a href="https://speakerdeck.com/skmetz/magic-tricks-of-testing-railsconf">slides</a>, here is the <a href="http://www.confreaks.com/videos/2452-railsconf2013-the-magic-tricks-of-testing">video</a> if you are blessed.</p>

<p>I learned a lot from the talk that I don't have to have 100% coverage for the test suite. Here's some pickups you can take away:</p>

<ul>
<li><em>DO NOT</em> test private method, since they are the most unstable part in the whole object</li>
<li><em>DO NOT</em> test out-going query message, it has no side effect to the message receiver</li>
<li><em>DO</em> test the out-going command message, ensure you have told the message receiver something it should execute on its part. If you heard about <a href="http://pragprog.com/articles/tell-dont-ask">"Tell, don't ask"</a>, you know that one object should <strong>tell</strong> another object to do something instead of <strong>asking</strong> the state of another object and make the decision based on the returned result. Since the out-going command message has side effect to the message receiver, you need to make sure the message is sent out</li>
<li><em>DO</em> test the incoming query message, just ensure the return result is expected</li>
<li><em>DO</em> test the incoming command message, just ensure the changes is made as expected</li>
</ul>


<p>That's all, happy testing. BTW, keep two things in mind for good OO and testing:</p>

<ul>
<li>Dependency injection</li>
<li>Tell, don't ask</li>
</ul>

]]></content>
  </entry>
  
</feed>
